<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Hugo Grimoire</title>
    <link>http://localhost:1313/categories/java/</link>
    <description>Recent content in Java on Hugo Grimoire</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 18 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>k-means Clustering</title>
      <link>http://localhost:1313/post/2021-05-18-k-means-clustering/</link>
      <pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2021-05-18-k-means-clustering/</guid>
      <description>
        
          
            _k-means clustering_ is a method of vector quantization, originally from signal processing, that aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean (cluster centers or cluster centroid), serving as a prototype of the cluster. This results in a partitioning of the data space into Voronoi cells.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Buddhabrot</title>
      <link>http://localhost:1313/post/2019-08-25-buddhabrot/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2019-08-25-buddhabrot/</guid>
      <description>
        
          
            The Buddhabrot fractal is a type of fractal that is generated by plotting the paths of points that escape from the Mandelbrot set. The resulting image resembles a series of intertwined spirals and branches, and is named after the shape it resembles, which is said to resemble the seated figure of Buddha. The Buddhabrot fractal is created by assigning each point in the complex plane a &#34;color&#34; based on how many times it takes for that point to escape from the Mandelbrot set, and then plotting the paths of the points that do escape. This process is repeated millions of times, resulting in a highly detailed and intricate fractal image.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Blending Textures With Open Simplex Noise</title>
      <link>http://localhost:1313/post/2019-08-18-blending-textures-with-open-simplex-noise/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2019-08-18-blending-textures-with-open-simplex-noise/</guid>
      <description>
        
          
            This Processing sketch loads two images and creates an image mask that blends them together. The transparency of the image mask is determined by 4D Open Simplex Noise, which loops perfectly.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Cube Wave</title>
      <link>http://localhost:1313/post/2018-12-30-cube-wave/</link>
      <pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2018-12-30-cube-wave/</guid>
      <description>
        
          
            Here&#39;s my take on... Daniel Shiffman&#39;s take on... Beesandbomb&#39;s take on the cube wave.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Lorenz Doll</title>
      <link>http://localhost:1313/post/2018-11-21-lorenz-doll/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2018-11-21-lorenz-doll/</guid>
      <description>
        
          
            In this sketch I turned every pixel of an image into a Lorenz System. I mapped the velocity of that system to the brightness value of the pixel. This was the result. Sadly, the Processing sketch I made this with is gone forever.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Barnsley Fern</title>
      <link>http://localhost:1313/post/2018-06-28-barnsley-fern/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2018-06-28-barnsley-fern/</guid>
      <description>
        
          
            The Barnsley Fern is a fractal pattern named after British mathematician Michael Barnsley. It is generated by an iterative process that involves repeatedly applying a set of geometric transformations to a simple initial shape. The resulting fern-like pattern displays self-similarity at different scales, and has applications in computer graphics, image compression, and chaos theory.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Comparing Java Distance Functions</title>
      <link>http://localhost:1313/post/2018-04-17-comparing-java-distance-functions/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2018-04-17-comparing-java-distance-functions/</guid>
      <description>
        
          
            &lt;ul&gt;
&lt;li&gt;Distance formula 1 execution time: 2224ms&lt;/li&gt;
&lt;li&gt;Distance formula 2 execution time: 4ms&lt;/li&gt;
&lt;li&gt;Distance formula 3 execution time: 3ms
&lt;br&gt;
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;script src=&#34;https://gist.github.com/Trimad/b222a8e360aa2fb17da2e512f4d4d22a.js&#34;&gt;&lt;/script&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Faster Java String Inputs</title>
      <link>http://localhost:1313/post/2018-04-11-java-turbo-reader/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2018-04-11-java-turbo-reader/</guid>
      <description>
        
          
            &lt;p&gt;TurboReader is my solution to the poor input performance of Scanner. All I need from a Reader in most programming contest problems is the ability to read ints and Double, and to read them quickly. That is all this class does, and it also tokenizes those values so that I never have to address empty lines in the text input. I have two versions of this class; a buffered version and an unbuffered version. Judging from the NetBeans performance profiler, the unbuffered version is favored in cases where the program only needs to read a few ints from System.in.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Kruskal&#39;s Algorithm Visualized With Processing</title>
      <link>http://localhost:1313/post/2018-04-11-kruskal-algorithm-processing/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2018-04-11-kruskal-algorithm-processing/</guid>
      <description>
        
          
            Kruskal&#39;s algorithm is a greedy algorithm used to find the minimum spanning tree of a connected, weighted graph. The algorithm works by sorting the edges of the graph by weight, and then adding the edges to the minimum spanning tree one by one, making sure to avoid creating cycles. Kruskal&#39;s algorithm has a time complexity of O(E log E) where E is the number of edges in the graph, and is widely used in network design and optimization problems.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collatz Conjecture &#43; Unit Circle</title>
      <link>http://localhost:1313/post/2018-04-09-collatz-conjecture-unit-circle/</link>
      <pubDate>Mon, 09 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2018-04-09-collatz-conjecture-unit-circle/</guid>
      <description>
        
          
            I created my own Collatz Conjecture visualization, experimenting with a unit circle design that resulted in 360 distinct &#34;branches&#34;. While it may not offer groundbreaking insights, the process was enjoyable and yielded interesting results, particularly for the number 327.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Minimum Spanning Tree Visualized</title>
      <link>http://localhost:1313/post/2018-04-07-minimum-spanning-tree-visualized/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2018-04-07-minimum-spanning-tree-visualized/</guid>
      <description>
        
          
            &lt;p&gt;I&#39;m working on a few programs that I will be using using to visualize algorithms on procedurally generated terrain. This particular program visualizes a minimum spanning tree using &lt;a href=&#34;https://en.wikipedia.org/wiki/Prim%27s_algorithm&#34;&gt;Prim&#39;s Algorithm&lt;/a&gt; on random walkers. The terrain is 128x128 tiles, each containing 4 vertices on the negative y-axis that I applied a &lt;a href=&#34;https://en.wikipedia.org/wiki/Perlin_noise&#34;&gt;Perlin Noise&lt;/a&gt; height map to. The map projection is orthographic, so all objects with the same dimension appear the same size, regardless of whether they are near or far from the camera. The frames were rendered at 1920x1080 resolution.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>AT&amp;T Hackathon</title>
      <link>http://localhost:1313/post/2018-03-12-att-hackathon/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2018-03-12-att-hackathon/</guid>
      <description>
        
          
            &lt;p&gt;So I participated in the AT&amp;amp;T Hackathon this year. I approached it as R&amp;amp;D for developing 3D games that run on Android. I
don&#39;t have much to say about it except that I learned an awful lot about the limitations of Android, which in turn
taught me a lot about optimization techniques, DPI-scaling and the matrix stack. Most importantly, the Hackathon taught
me how to code faster. At home, I spend an awful lot of time playing with variables to make things pretty whereas under
this circumstance I was forced to keep creating new features due to the looming threat of having nothing to show at the
end. I wrote a lot of useful functions for building 3D scenes and I can&#39;t wait to start using them on larger projects.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Generating Terrain with Open Simplex Noise</title>
      <link>http://localhost:1313/post/2018-01-03-generating-terrain-with-open-simplex-noise/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2018-01-03-generating-terrain-with-open-simplex-noise/</guid>
      <description>
        
          
            Expanding on last night&#39;s work with Open Simplex Noise. I figured the next logical step was to make a Minecraftian terrain generator, so here it is. If I ever felt compelled to build a game from the ground up, this would probably be my starting point.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Open Simplex Noise</title>
      <link>http://localhost:1313/post/2018-01-02-open-simplex-noise/</link>
      <pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2018-01-02-open-simplex-noise/</guid>
      <description>
        
          
            So, I was on the hunt for a simpler way to make cool looped animations and stumbled upon this thing called 4D Simplex Noise. I found a super helpful tutorial on necessarydisorder&#39;s WordPress page called &#34;Drawing from noise, and then making animated loopy GIFs from there&#34;. It was really informative, got me inspired, and had a spot-on title.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Flipping Tiles</title>
      <link>http://localhost:1313/post/2017-11-18-flippy-tiles/</link>
      <pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2017-11-18-flippy-tiles/</guid>
      <description>
        
          
            Simple animation of tiles flipping. They can flip randomly or they can be flipped by applying Perlin Noise.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Juno Cam Image Processing</title>
      <link>http://localhost:1313/post/2017-11-12-juno-cam-image-processing/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2017-11-12-juno-cam-image-processing/</guid>
      <description>
        
          
            &lt;p&gt;This is a program I wrote last November that assembles raw image data coming from the Juno Spacecraft. When I started, I thought it would be cool if this program ran in a browser window. When I finished, I was certain that this program should have been a desktop application. The final images this program produces are quite large; well over 20mb, showing the individual red, green, blue, and composite brightness data. Here&#39;s a &lt;a href=&#34;https://www.missionjuno.swri.edu/junocam/processing&#34;&gt;block of text ripped from the JunoCam website&lt;/a&gt; that does a good job of explaining why these images need to be reconstructed:&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Counting Sort</title>
      <link>http://localhost:1313/post/2017-07-18-counting-sort/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2017-07-18-counting-sort/</guid>
      <description>
        
          
            Counting sort is a non-comparison based sorting algorithm that works by determining, for each element in an input array, the number of elements that are less than it. This information is then used to place the element in its correct position in the output array. The algorithm has a linear time complexity of O(n+k), where n is the number of elements in the input array and k is the range of values in the input array.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
