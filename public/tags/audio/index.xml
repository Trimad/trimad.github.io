<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Audio on Hugo Grimoire</title>
    <link>http://localhost:1313/tags/audio/</link>
    <description>Recent content in Audio on Hugo Grimoire</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 24 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/audio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenAI Whisper</title>
      <link>http://localhost:1313/post/2023-02-24-openai-whisper/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2023-02-24-openai-whisper/</guid>
      <description>
        
          
            Whisper is a general-purpose speech recognition model. It is trained on a large dataset of diverse audio and is also a multi-task model that can perform multilingual speech recognition as well as speech translation and language identification.
          
          
        
      </description>
    </item>
    
    <item>
      <title>NVIDIA Maxine Windows Audio Effects SDK</title>
      <link>http://localhost:1313/post/2022-04-20-using-the-nvidia-maxine-audio-effects-sdk-demo/</link>
      <pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2022-04-20-using-the-nvidia-maxine-audio-effects-sdk-demo/</guid>
      <description>
        
          
            This is my tentative workflow for cleaning-up poor audio using the NVIDIA Maxine Windows Audio Effects SDK.
          
          
        
      </description>
    </item>
    
    <item>
      <title>ffmpeg</title>
      <link>http://localhost:1313/post/2022-01-27-ffmpeg/</link>
      <pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2022-01-27-ffmpeg/</guid>
      <description>
        
          
            &lt;p&gt;ffmpeg is a complete, cross-platform solution to record, convert and stream audio and video.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.ffmpeg.org/download.html#build-windows&#34;&gt;ffmpeg Download&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a href=&#34;https://ffmpeg.org/ffmpeg.html&#34;&gt;ffmpeg Documentation
&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;audio-processing&#34;&gt;Audio Processing&lt;/h2&gt;
&lt;h3 id=&#34;convert-to-8khz-single-channel-pcm&#34;&gt;Convert to 8kHz, single-channel PCM&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;ffmpeg -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;input.mp3&amp;#34;&lt;/span&gt; -ar &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt; -ac &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; output.wav
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;convert-to-16khz-single-channel-pcm&#34;&gt;Convert to 16kHz, single-channel PCM&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;ffmpeg -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;input.mp3&amp;#34;&lt;/span&gt; -ar &lt;span class=&#34;m&#34;&gt;16000&lt;/span&gt; -ac &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; output.wav
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;convert-to-48khz-single-channel-pcm&#34;&gt;Convert to 48kHz, single-channel PCM&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;ffmpeg -i input.mp3 -ar &lt;span class=&#34;m&#34;&gt;48000&lt;/span&gt; -ac &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; output.wav
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;video-processing&#34;&gt;Video Processing&lt;/h2&gt;
&lt;h3 id=&#34;add-music-to-a-video&#34;&gt;Add Music to a Video&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;ffmpeg -i video.mp4 -i music.mp3 -codec copy -shortest output.mp4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;dl&gt;
&lt;dt&gt;-i video.mp4&lt;/dt&gt;
&lt;dd&gt;Select “video.mp4” as an input file from the same directory.&lt;/dd&gt;
&lt;dt&gt;-i music.mp3&lt;/dt&gt;
&lt;dd&gt;Select “music.mp4” as an input file from the same directory.&lt;/dd&gt;
&lt;dt&gt;-codec copy&lt;/dt&gt;
&lt;dd&gt;Specifies that we are not re-encoding anything.&lt;/dd&gt;
&lt;dt&gt;-shortest&lt;/dt&gt;
&lt;dd&gt;Use this flag if the video length is shorter than the audio length. Otherwise, use no flag at all here.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id=&#34;assemble-images-into-a-video&#34;&gt;Assemble images into a video&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;ffmpeg -framerate &lt;span class=&#34;m&#34;&gt;60&lt;/span&gt; -s 2560x1440 -i %04d.png output.mp4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;dl&gt;
&lt;dt&gt;-framerate 60&lt;/dt&gt;
&lt;dd&gt;Set the frame rate to 60FPS.&lt;/dd&gt;
&lt;dt&gt;-s 2560x1440&lt;/dt&gt;
&lt;dd&gt;Set the video resolution to 2560x1440 pixels.&lt;/dd&gt;
&lt;dt&gt;-i %04d.png&lt;/dt&gt;
&lt;dd&gt;This flag assumes there is a folder of .png files in the same directory named in the format 0001.png, 0002.png, etc. It will load all images following this naming convention as inputs to be processed.&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;ffmpeg -start_number &lt;span class=&#34;m&#34;&gt;0140&lt;/span&gt; -i %04d.png interpolated-0.mp4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;re-encode-video-for-youtube&#34;&gt;Re-encode Video For YouTube&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;ffmpeg -i transition.mp4 -c:v libx264 -preset slow -crf &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt; -c:a copy -pix_fmt yuv420p transition.mkv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;dl&gt;
&lt;dt&gt;-i transition.mp4&lt;/dt&gt;
&lt;dd&gt;Select &amp;quot;transition.mp4&amp;quot; as the input file.&lt;/dd&gt;
&lt;dt&gt;-c:v libx264&lt;/dt&gt;
&lt;dd&gt;set the video codec to H.264&lt;/dd&gt;
&lt;dt&gt;-preset slow&lt;/dt&gt;
&lt;dd&gt;A preset is a collection of options that will provide a certain encoding speed to compression ratio. A slower preset will provide better compression (compression is quality per filesize). This means that, for example, if you target a certain file size or constant bit rate, you will achieve better quality with a slower preset. Similarly, for constant quality encoding, you will simply save bitrate by choosing a slower preset. Use the slowest preset that you have patience for. The available presets in descending order of speed are:&lt;/dd&gt;
&lt;/dl&gt;
&lt;ul&gt;
&lt;li&gt;ultrafast&lt;/li&gt;
&lt;li&gt;superfast&lt;/li&gt;
&lt;li&gt;veryfast&lt;/li&gt;
&lt;li&gt;faster&lt;/li&gt;
&lt;li&gt;fast&lt;/li&gt;
&lt;li&gt;medium (default preset)&lt;/li&gt;
&lt;li&gt;slow&lt;/li&gt;
&lt;li&gt;slower&lt;/li&gt;
&lt;li&gt;veryslow&lt;/li&gt;
&lt;/ul&gt;
&lt;dl&gt;
&lt;dt&gt;-crf 18&lt;/dt&gt;
&lt;dd&gt;Constant Rate Factor (CRF). The range of the CRF scale is 0–51, where 0 is lossless, 23 is the default, and 51 is worst quality possible. A lower value generally leads to higher quality, and a subjectively sane range is 17–28. Consider 17 or 18 to be visually lossless or nearly so; it should look the same or nearly the same as the input but it isn&#39;t technically lossless.&lt;/dd&gt;
&lt;dt&gt;-c:a copy&lt;/dt&gt;
&lt;dd&gt;Copy the audio codec from that of the input file to the output file&lt;/dd&gt;
&lt;dt&gt;-pix_fmt yuv420p&lt;/dt&gt;
&lt;dd&gt;This flag is only needed for your output to work in QuickTime, Windows Media player and other offline media players. These players only support the YUV planar color space with 4:2:0 chroma subsampling for H.264 video. Otherwise, depending on your source, ffmpeg may output to a pixel format that may be incompatible with these players.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2&gt;Video Filters&lt;/h2&gt;
&lt;h3 id=&#34;stack-two-videos-side-by-side&#34;&gt;Stack two videos side-by-side&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;ffmpeg -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;left.mp4&amp;#34;&lt;/span&gt; -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;right.mp4&amp;#34;&lt;/span&gt; -filter_complex hstack output.mp4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command uses the ffmpeg software to combine two video files, &amp;quot;left.mp4&amp;quot; and &amp;quot;right.mp4&amp;quot;, into a single output video file &amp;quot;output.mp4&amp;quot;. The &amp;quot;-i&amp;quot; option specifies the input video files. The &amp;quot;-filter_complex&amp;quot; option applies the &amp;quot;hstack&amp;quot; filter, which horizontally stacks the two input videos side by side to form a single output video.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
