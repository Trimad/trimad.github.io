<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Minimum Spanning Tree on Hugo Grimoire</title>
    <link>https://trimad.github.io/tags/minimum-spanning-tree/</link>
    <description>Recent content in Minimum Spanning Tree on Hugo Grimoire</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 11 Apr 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://trimad.github.io/tags/minimum-spanning-tree/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kruskal&#39;s Algorithm Visualized With Processing</title>
      <link>https://trimad.github.io/post/2018-04-11-kruskal-algorithm-processing/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2018-04-11-kruskal-algorithm-processing/</guid>
      <description>
        
          
            Kruskal&#39;s algorithm is a greedy algorithm used to find the minimum spanning tree of a connected, weighted graph. The algorithm works by sorting the edges of the graph by weight, and then adding the edges to the minimum spanning tree one by one, making sure to avoid creating cycles. Kruskal&#39;s algorithm has a time complexity of O(E log E) where E is the number of edges in the graph, and is widely used in network design and optimization problems.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Minimum Spanning Tree Visualized</title>
      <link>https://trimad.github.io/post/2018-04-07-minimum-spanning-tree-visualized/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2018-04-07-minimum-spanning-tree-visualized/</guid>
      <description>
        
          
            &lt;p&gt;I&#39;m working on a few programs that I will be using using to visualize algorithms on procedurally generated terrain. This particular program visualizes a minimum spanning tree using &lt;a href=&#34;https://en.wikipedia.org/wiki/Prim%27s_algorithm&#34;&gt;Prim&#39;s Algorithm&lt;/a&gt; on random walkers. The terrain is 128x128 tiles, each containing 4 vertices on the negative y-axis that I applied a &lt;a href=&#34;https://en.wikipedia.org/wiki/Perlin_noise&#34;&gt;Perlin Noise&lt;/a&gt; height map to. The map projection is orthographic, so all objects with the same dimension appear the same size, regardless of whether they are near or far from the camera. The frames were rendered at 1920x1080 resolution.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
